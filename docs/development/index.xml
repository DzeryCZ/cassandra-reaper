<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developer Resources on Reaper: Easy Repair Management for Apache Cassandra</title>
    <link>http://cassandra-reaper.io/development/</link>
    <description>Recent content in Developer Resources on Reaper: Easy Repair Management for Apache Cassandra</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://cassandra-reaper.io/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Build from Source</title>
      <link>http://cassandra-reaper.io/development/building/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/development/building/</guid>
      <description>Building Install Packages Debian packages and RPMs can be built from this project using Make, for example:
make deb make rpm Building JARs from source To build and run tests use the following command:
mvn clean package You can skip the tests if you just want to build using the following command:
mvn clean package -DskipTests Building Docker Image from source See the Docker section for more details.
Building Using Docker To simplify the build toolchain it&amp;rsquo;s possible to build everything using Docker itself.</description>
    </item>
    
    <item>
      <title>Forward Merging</title>
      <link>http://cassandra-reaper.io/development/merging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/development/merging/</guid>
      <description>Reaper practices forward merging commits.
Fixes and improvements required to release branches are first committed to those branches. These changes are merged forward onto master afterwards.
An example where a bugfix developed and approved for the release branch 1.4 is to be merged;
1. Rebase the work one last time off the release branch git checkout bob/1.4_bugfix git rebase 1.4 git push 2. Switch to the Release branch and fast-forward merge in the fix git checkout 1.</description>
    </item>
    
    <item>
      <title>Cutting a Release</title>
      <link>http://cassandra-reaper.io/development/releases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/development/releases/</guid>
      <description>Cutting a release involves the following steps. You will see these terms referenced by the steps.
 &amp;lt;RELEASE_BRANCH&amp;gt; - The major version of the release branch you will be releasing from. e.g. 3.0. &amp;lt;RELEASE_VERSION&amp;gt; - The version of release you want to create. e.g. 3.0.7.  Where you see the term, substitute it for the value that applies to the release.
1. Check if the code base is ready for release Check with the community if the codebase is ready for the release.</description>
    </item>
    
    <item>
      <title>REST API</title>
      <link>http://cassandra-reaper.io/development/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/development/api/</guid>
      <description>Source code for all the REST resources can be found from package io.cassandrareaper.resources.
Login Resource  POST /login  Expected form parameters:  username: User to login with as defined in Shiro settings (default user is admin) password: Password to authenticate with through Shiro (default password of user admin is: admin) rememberMe: Boolean to have the Web UI remember the username   Endpoint for logging in to Reaper    Shiro JWT Provider  GET /jwt  Expected query parameters: None Returns a JWT to use in all REST calls when authentication is turned on in Reaper.</description>
    </item>
    
  </channel>
</rss>